# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

from data.fetch_data import fetch_yfinance_data
from strategies.ma_crossover import generate_signals
from utils.performance import backtest_strategy, calculate_performance
from utils.performance import plot_strategy

st.title("ğŸ“Š Algoritmik Ticaret SimÃ¼latÃ¶rÃ¼")
st.write("Hareketli Ortalama KesiÅŸimi (Golden Cross) Stratejisi")

# Sidebar
ticker = st.sidebar.text_input("Hisse SembolÃ¼", "SPY")
start_date = st.sidebar.date_input("BaÅŸlangÄ±Ã§ Tarihi", pd.to_datetime("2010-01-01"))
end_date = st.sidebar.date_input("BitiÅŸ Tarihi", pd.to_datetime("2024-01-01"))

short_window = st.sidebar.slider("KÄ±sa MA (gÃ¼n)", 10, 100, 50)
long_window = st.sidebar.slider("Uzun MA (gÃ¼n)", 100, 200, 200)

if st.button("Stratejiyi Ã‡alÄ±ÅŸtÄ±r"):
    with st.spinner("Veri indiriliyor ve analiz yapÄ±lÄ±yor..."):
        # 1. Veri al
        data = fetch_yfinance_data(ticker, start_date, end_date)
        if data is None or data.empty:
            st.error("Veri alÄ±namadÄ±. SembolÃ¼ kontrol edin.")
        else:
            # 2. Sinyal Ã¼ret
            data = generate_signals(data, short_window, long_window)

            # 3. Backtest
            results = backtest_strategy(data, initial_capital=10000)
            final_capital = results["final_capital"]
            trades = results["trades"]

            # 4. Performans metrikleri
            perf_metrics = calculate_performance(data, trades)

            # 5. GÃ¶rselleÅŸtir
            fig = plot_strategy(data, ticker, short_window, long_window)
            st.pyplot(fig)

            # 6. SonuÃ§larÄ± gÃ¶ster
            st.success(f"Son Sermaye: ${final_capital:,.2f}")
            st.info(f"Toplam Getiri: %{perf_metrics['total_return']:.2f}")
            st.write(f"Sharpe OranÄ±: {perf_metrics['sharpe_ratio']:.2f}")
            st.write(f"Toplam Ä°ÅŸlem SayÄ±sÄ±: {len(trades)}")